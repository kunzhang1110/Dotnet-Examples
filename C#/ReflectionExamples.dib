#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

# Reflection

#!csharp

using System.Reflection;

class Student
{
    public string Name { get; set; }

    public Student(){}
    public Student(string name){Name =name;}

    protected string PrintName(string text) {return text + Name;}

}

delegate string PrintNameDelegate(string text);
var alice = new Student { Name = "Alice" };

//Get Type
Type type = alice.GetType();

//Instantiate object with type
var constructorParameters = new object[] { "Bob" };
var bob = (Student)Activator.CreateInstance(type, constructorParameters);

//Invoke Method
var bindingFlags = BindingFlags.NonPublic | BindingFlags.Instance; //search non-public instance memebers
MethodInfo printNameMethod = type.GetMethod("PrintName", bindingFlags);//protected method PrintName
var methodParameters = new object[] { "Name is " };
var result = printNameMethod.Invoke(bob, methodParameters);
Console.WriteLine(result);

//Create Delegate
var del = (PrintNameDelegate)Delegate.CreateDelegate(typeof(PrintNameDelegate), bob, printNameMethod);
Console.WriteLine(del("My Name is "));
