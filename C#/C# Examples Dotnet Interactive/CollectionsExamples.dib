#!meta

{"kernelInfo":{"defaultKernelName":null,"items":[{"name":"csharp","languageName":"C#","aliases":["c#","cs"]},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"html","languageName":"HTML"},{"name":"sql","languageName":"SQL"},{"name":"kql","languageName":"KQL"},{"name":"mermaid","languageName":"Mermaid"},{"name":"httpRequest","languageName":"http"},{"name":"value"}]}}

#!markdown

# Collections

#!markdown

|                         | Access by  | Lookup                  | Manipulate | Ordering        | Notes                                                                                            | Contiguous Storage |
| ----------------------- | ---------- | ----------------------- | ---------- | --------------- | ------------------------------------------------------------------------------------------------ | ------------------ |
| List<T>                 | Index      | Index: O(1) Value: O(n) | O(n)       | User Controlled | Best for smaller lists where direct access required and no sorting. Use Dynamic Array List.      | Yes                |
| Dictionary<K, V>        | Key        | Key: O(1)               | O(1)       | Unordered       | Best for high performance lookups. Use Hash Table.                                               | Yes                |
| HashSet<T>              | Key        | Key: O(1)               | O(1)       | Unordered       |                                                                                                  | Yes                |
| SortedDictionary <K, V> | Key        | Key: O(log n)           | O(log n)   | Ordered         | Compromise of Dictionary speed and ordering. Use binary search tree.                             | No                 |
| SortedList<K, V>        | Key        | Key: O(log n)           | O(n)       | Ordered         | Use arrays as tree. Vs Sorted Dictionary, use less memory and load pre-sorted data faster.       | Yes                |
| LinkedList<T>           | No         | Value: O(n)             | O(1)       | User Controlled | Use Doubly Linked List. Best for a large number of insert and delete <- do not need resize array | No                 |
| Stack<T>                | Only Top   | Top: O(1)               | O(1)       | LIFO            | ~= List<T> except only process as LIFO                                                           | Yes                |
| Queue<T>                | Only Front | Front: O(1)             | O(1)       | FIFO            | ~= List<T> except only process as FIFO                                                           | Yes                |

#!markdown

## Generic vs. Non-generic

#!markdown

| Non-generic Collection                       | Genric collection                                                      |
| -------------------------------------------- | ---------------------------------------------------------------------- |
| can hold any types; not type safe            | type safe                                                              |
| check for type safety at runtime             | check for type safety at compile time (even checked by code validator) |
| may need type casting when retriving element | no type casting                                                        |

#!csharp

using System.Collections;
using System.Collections.Generic;

var arrayList = new ArrayList();
var intList = new List<int>();

//Type-safety
arrayList.Add(1);
arrayList.Add("2"); //allowed;
intList.Add(1);
//intList.Add("2"); //not allowed; checked by code validator

//Type-casting
int a1 = (int) arrayList[0]; //arrayList[0] is Object type
int i1 =  intList[0]; //intList[0] is int type

#!markdown

## Array

#!csharp

var intArray = new int[] { 1, 2, 3, 4, 5, 6, 7 };

// IndexOf() returns the index of 3
Console.WriteLine(Array.IndexOf(intArray, 3));

// Clear() sets 3 element from index 1 to zero
Array.Clear(intArray, 1, 3); 
Console.WriteLine(String.Join(",", intArray));

//Copy() three elements
int[] intArray_copy = new int[3];
Array.Copy(intArray, intArray_copy, 3);

//ForEach() 
Array.ForEach(intArray, e => Console.Write(e+ " "));

#!markdown

### Multi-dimensional Array

#!csharp

int[,] mdArray1 = new int[3, 2] { { 1, 2 }, { 3, 4 }, { 5, 6 } };
int[,] mdArray2 = { { 1, 2 }, { 3, 4 }, { 5, 6 } };
Console.WriteLine(mdArray1[1, 1]);

#!markdown

### Jagged Array
A jagged array is an array of an array.

#!csharp

var intList = new List<int>() { 1, 2, 3, 4 , 5 };
foreach(int element in intList){
    switch (element)
    {
        case int x when x >= 4:
            Console.Write("A ");
            break;
        case int x when x > 1 && x <= 3:
            Console.Write("B ");
            break;
        case 1:
            Console.Write("C ");
            break;
        default:
            break;
    }
}
