#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":["c#","cs"],"languageName":"C#","name":"csharp"},{"aliases":["f#","fs"],"languageName":"F#","name":"fsharp"},{"aliases":[],"languageName":"HTML","name":"html"},{"aliases":[],"languageName":"http","name":"httpRequest"},{"aliases":["js"],"languageName":"JavaScript","name":"javascript"},{"aliases":[],"languageName":"KQL","name":"kql"},{"aliases":[],"languageName":"Mermaid","name":"mermaid"},{"aliases":["powershell"],"languageName":"PowerShell","name":"pwsh"},{"aliases":[],"languageName":"SQL","name":"sql"},{"aliases":[],"name":"value"}]}}

#!markdown

## Preprocessor directives

#!csharp

#define CSHARP
#undef PYTHON

#if (CSHARP && PYTHON)
    Console.WriteLine("CSHARP and PYTHON are defined"); //won't be compiled
#elif (CSHARP && !PYTHON)
    Console.WriteLine("CSHARP is defined, PYTHON is undefined");
#endif

#if (!JAVA)
    #warning JAVA is undefined
    #error JAVA is undefined
#endif
Console.WriteLine("#error directive example");

#!markdown

## Jagged Arrays

#!csharp

int[][] intJaggedArray = new int[2][]
{
    new int[3]{1, 2, 3},
    new int[2]{4, 5}
};

Console.WriteLine(intJaggedArray[0][0]); // 1

#!markdown

## Switch Case Syntax

#!markdown

### Switch-case with When

#!csharp

var i = 2;  
var result = "";

switch(i){
    case 1: 
    result = "Case 1";
    break;
    case int x when x > 1:
     result = "Case > 1" ;
     break;
    default:
      result = "Default Case";
      break;
}

Console.WriteLine(result);  

#!markdown

### C# 7.0 New Syntax

#!csharp

var i = 2;  
  
var result = i switch  
{  
    1 => "Case 1",  
    _ when i > 1 => "Case > 1" ,
    _ => "Default Case"
};  
  
Console.WriteLine(result);  

#!csharp

[Route("api/[controller]")]
[ApiController]
public class ValuesController : ControllerBase
{
    [HttpGet]
    [ActionName("RetrieveValue")]
    public IActionResult GetValue()
    {
        var value = "Value";
        return Ok(value);
    }

    [HttpPost]
    public IActionResult Create()
    {
        var createdResource = new { Id = 1, Version = "1.0" };
        var actionName = "RetrieveValue";
        return CreatedAtAction(actionName, createdResource);
        // Location: .../api/Values
    }
}
